PROCEDURE $Rdc (VAR Ch: Char; VAR Fdb: Txtfdb); EXTERN;
FUNCTION $Bufval (VAR Fdb: Txtfdb):Char; EXTERN;
PROCEDURE $Rdi (VAR i: Integer; VAR Fdb: Txtfdb); EXTERN;
procedure $parseinteger (var fdb:txtfdb; var digits: digitarray;
	 var negative,octal: boolean; var dctr: digitctr); EXTERN;

PROCEDURE $Rdr ( VAR Sourceval:Real; VAR Fdb:Txtfdb );
   VAR Mant: Integer;
      Negative, Octal: Boolean;
      Digits: Digitarray;
      Scale,Exponent,I: Integer;
      Dctr: Digitctr;
      Ch:Char;
      Sign:Boolean;
      Rval,Fac,R:Real;
   BEGIN
   $Parseinteger (Fdb,Digits,Negative,Octal,Dctr);
   Mant := 0;
   FOR I := 1 TO Dctr DO
      Mant := 10*Mant + Digits[I];
   Scale := 0;
   Rval := Mant;
   IF $Bufval(Fdb) = '.' THEN
      BEGIN
      $Rdc (Ch,Fdb);
      WHILE ($Bufval(Fdb) IN ['0'..'9']) DO
	 BEGIN
	 Rval := 10.0 * Rval + (Ord($Bufval(Fdb)) - Ord('0'));
	 Scale := Scale - 1;
	 $Rdc (Ch,Fdb);
	 END;
      END;
   IF Negative THEN Rval := -Rval;
   Ch := $Bufval(Fdb);
   IF (Ch = 'E') OR (Ch = 'e') THEN
      BEGIN
      $Rdc(Ch,Fdb);
      $Rdi (Exponent,Fdb);
      Scale := Scale + Exponent;
      END;
   IF Scale <> 0 THEN
      BEGIN
      IF Scale < 0 THEN
	 BEGIN
	 Scale := Abs(Scale); Fac := 0.1
	 END
      ELSE
	 Fac := 10.0;
      R := 1.0;
      REPEAT
	 IF Odd(Scale) THEN R := R * Fac;
	 Scale := Scale DIV 2;
	 IF Scale <> 0 THEN Fac := Sqr(Fac)
      UNTIL Scale = 0;

      Rval := Rval * R;
      END;
   Sourceval := Rval;
   END;
.
